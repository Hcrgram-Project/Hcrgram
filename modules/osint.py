# Osint
'''
.phone</code> <code>.id</code> <code>.ip</code>:: –ü—Ä–æ–±–∏–≤ –ø–æ osint –±–æ—Ç–∞–º. \n\n<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ</b>: \n<code>.phone</code> <i>–ü–æ–∏—Å–∫ –ø–æ —Ç–µ–ª–µ—Ñ–æ–Ω—É</i>\n<code>.id</code> <i>id —Ç–µ–ª–µ–≥—Ä–∞–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</i>\n<code>.ip</code> <i>ipaddress</i>
'''

from telethon import events
import asyncio
import re
import os
import requests, json


def get_tuples_until_myid(lst):
    new_lst = []
    for tpl in lst:
        if tpl[0] == 5:
            break
        new_lst.append(tpl)
    return new_lst

def a(client):
	@client.on(events.NewMessage(pattern=r"\.id", outgoing=True))
	async def _(event):

		args = event.text.split(' ')
		print(args)
		if len(args) <2 or not args[-1].isdigit():
			await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å ID! –ü—Ä–∏–º–µ—Ä:</b>\n<code>.id 1234567</code>', parse_mode='html')
			return
		elif "+" in args[-1]:
			await event.edit('<b>‚ùå –î–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ –Ω–æ–º–µ—Ä—É –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É</b><code>.phone</code> <i>–Ω–æ–º–µ—Ä</i>')
		else:
			id_to_search = args[-1]

		async def search_quickosint(id_to_search):
			await client.send_message('https://t.me/dkdkkerkqwe_bot','/start')
			await client.send_message('https://t.me/dkdkkerkqwe_bot',f'#id{id_to_search}')
			await asyncio.sleep(3)
			message_from_bot = [i.text async for i in client.iter_messages('https://t.me/dkdkkerkqwe_bot', limit=1)][0]
			pat = r'\n-----'#r'(.|\n)+(?=-----)'
			a = re.split(pat, message_from_bot)
			message_from_bot = a[0]

			return message_from_bot

		async def search_gta(id_to_search):
			await client.send_message('https://t.me/askjldfhashdfhlasdbot','/start')
			await asyncio.sleep(1)
			await client.send_message('https://t.me/askjldfhashdfhlasdbot',f'{id_to_search}')
			await asyncio.sleep(1)
			message_from_bot = [i async for i in client.iter_messages('https://t.me/askjldfhashdfhlasdbot', limit=1)][0]
			await asyncio.sleep(0.5)
			await message_from_bot.click(0)

			await asyncio.sleep(3)
			message_from_bot = [i.text async for i in client.iter_messages('https://t.me/askjldfhashdfhlasdbot', limit=1)][0]
			if '–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç?' in message_from_bot:
				return '–õ–∏–º–∏—Ç—ã –≤ –±–æ—Ç–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
			return message_from_bot

		async def search_telescan(id_to_search):
			await client.send_message('https://t.me/Hcrgram_osint_3_bot','/start')
			await asyncio.sleep(3)
			await client.send_message('https://t.me/Hcrgram_osint_3_bot',f'{id_to_search}')
			await asyncio.sleep(3)
			message_from_bot = []
			async for i in client.iter_messages('https://t.me/Hcrgram_osint_3_bot', limit=3):
				if not '–Ø –Ω–µ –Ω–∞—à—ë–ª' in i.text and not '–∑–∞–ø—Ä–æ—Å–æ–≤' in i.text and not '–∑–∞–ø—Ä–µ—â—ë–Ω' in i.text and not id_to_search == i.text:
					message_from_bot.append(i.text)
					print(i.text)
				else:

					message_from_bot.append("–ù–µ –Ω–∞–π–¥–µ–Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏")

			print(message_from_bot)

			# message_from_bot = [i.text if not i.text in ['–Ø –Ω–µ –Ω–∞—à—ë–ª','–∑–∞–ø—Ä–æ—Å–æ–≤','–∑–∞–ø—Ä–µ—â—ë–Ω','–ó–∞–ø—É—Å–∫–∞—é','–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] else None async for i in client.iter_messages('https://t.me/Hcrgram_osint_3_bot', limit=2)][0]
			return max(message_from_bot).replace('__','').replace('**','')

		async def search_insight(id_to_search):
			myid = (await client.get_me()).id
			bot = 'https://t.me/ibhldr_bot'
			await client.send_message(bot,'/start')
			await asyncio.sleep(3)
			await client.send_message(bot,f'{id_to_search}')
			await asyncio.sleep(5)
			messages1 = []
			async for i in client.iter_messages(bot, limit=10):
				try: 
					i.from_id.user_id
					break
				except:
					d = i.text.replace('__','').replace('**','')
					forb_phrases = [
						'–ú–æ—è –±–∞–∑–∞',
						'–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã.',
						'‚ùå',
						'unamer_bot',
						'–ü–æ–¥—Å–∫–∞–∑–∫–∞'
					]

					if not d in forb_phrases:
						messages1.append(d)

			return reversed(messages1)


		await event.edit('üî≤üî≤üî≤üî≤\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%</b>', parse_mode='html')
		qos = await search_quickosint(id_to_search)
		qos = qos.replace('__','').replace('**','').replace('`','')
		await event.edit('‚¨õÔ∏èüî≤üî≤üî≤\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 25%</b>', parse_mode='html')
		gta = await search_gta(id_to_search)
		gta = gta.replace('__','').replace('**','').replace('`','')
		await event.edit('‚¨õÔ∏è‚¨õÔ∏èüî≤üî≤\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 50%</b>', parse_mode='html')
		telescan = await search_telescan(id_to_search)
		await event.edit('‚¨õÔ∏è‚¨õÔ∏è‚¨õÔ∏èüî≤\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 75%</b>', parse_mode='html')
		insight = await search_insight(id_to_search)
		await event.edit('üü©üü©üü©üü©\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 100%</b>', parse_mode='html')
		await asyncio.sleep(0.6)
		await event.edit('‚¨áÔ∏è\n<b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...</b>‚¨áÔ∏è', parse_mode='html')

		if f'{id_to_search}.txt' in os.listdir('deanons'):
			os.remove(f'deanons/{id_to_search}.txt')

		with open(f'deanons/{id_to_search}.txt', 'a+', encoding='utf-8') as file:
			file.write(f'QUICK OSINT: ------------------')
			file.write(f'\n{qos}')
			file.write(f'\n\n\nGTA SEARCH: ------------------')
			file.write(f'\n{gta}')
			file.write(f'\n\n\nTELESCAN: ------------------')
			file.write(f'\n{telescan}')
			file.write(f'\n\n\nINSIGHT: ------------------')
			sss = '\n'.join(insight)
			file.write(f"\n{sss}")

		await event.delete()

		try:
			chatid = event.chat.id 
		except:
			chatid = event.message.peer_id.user_id

		await client.send_file(
			chatid,
			file=f'deanons/{id_to_search}.txt', 
			caption=f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Osint –±–æ—Ç–∞—Ö –ø–æ ID: </b><code>{id_to_search}</code>', 
			parse_mode='html'
		)

	@client.on(events.NewMessage(pattern=r"\.phone", outgoing=True))
	async def _(event):

		args = event.text.split(' ')
		print(args)
		if len(args) <2 or not args[-1].replace('+','').isdigit():
			await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å –Ω–æ–º–µ—Ä–æ–º! –ü—Ä–∏–º–µ—Ä:</b>\n<code>.phone +1234567</code>', parse_mode='html')
			return
		else:
			id_to_search = args[-1].replace('+','')

		async def search_quickosint(id):
			await client.send_message('https://t.me/dkdkkerkqwe_bot','/start')
			await client.send_message('https://t.me/dkdkkerkqwe_bot',f'+{id_to_search}')
			await asyncio.sleep(3)
			message_from_bot = [i.text async for i in client.iter_messages('https://t.me/dkdkkerkqwe_bot', limit=1)][0]
			pat = r'\n-----'
			a = re.split(pat, message_from_bot)
			message_from_bot = a[0]

			return message_from_bot

		async def search_gta(id):
			await client.send_message('https://t.me/askjldfhashdfhlasdbot','/start')
			await asyncio.sleep(1)
			await client.send_message('https://t.me/askjldfhashdfhlasdbot',f'+{id_to_search}')

			await asyncio.sleep(3)
			message_from_bot = [i.text async for i in client.iter_messages('https://t.me/askjldfhashdfhlasdbot', limit=1)][0]
			if '–ö–∞–∫ —É–≤–µ–ª–∏—á–∏—Ç—å –ª–∏–º–∏—Ç?' in message_from_bot:
				return '–õ–∏–º–∏—Ç—ã –≤ –±–æ—Ç–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å'
			return message_from_bot



		await event.edit('üî≤üî≤üî≤üî≤\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 0%</b>', parse_mode='html')
		qos = await search_quickosint(id_to_search)
		qos = qos.replace('__','').replace('**','').replace('`','')
		await event.edit('‚¨õÔ∏èüî≤üî≤üî≤\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 25%</b>', parse_mode='html')
		gta = await search_gta(id_to_search)
		await event.edit('üü©üü©üü©üü©\n<b>–ü—Ä–æ–≥—Ä–µ—Å—Å: 100%</b>', parse_mode='html')
		await asyncio.sleep(0.6)
		await event.edit('‚¨áÔ∏è\n<b>–û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞...</b>‚¨áÔ∏è', parse_mode='html')

		if f'{id_to_search}.txt' in os.listdir('deanons'):
			os.remove(f'deanons/id_{id_to_search}.txt')

		with open(f'deanons/{id_to_search}.txt', 'a+', encoding='utf-8') as file:
			file.write(f'QUICK OSINT: ------------------')
			file.write(f'\n{qos}')
			file.write(f'\n\n\nGTA SEARCH: ------------------')
			file.write(f'\n{gta}')

		await event.delete()

		
		try:
			chatid = event.chat.id 
		except:
			chatid = event.message.peer_id.user_id
		await client.send_file(
			chatid,
			file=f'deanons/{id_to_search}.txt', 
			caption=f'<b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –≤ Osint –±–æ—Ç–∞—Ö –ø–æ –Ω–æ–º–µ—Ä—É: </b><code>{id_to_search}</code>', 
			parse_mode='html'
		)


	@client.on(events.NewMessage(pattern=r"\.ip", outgoing=True))
	async def _(event):

		args = event.text.split(' ')
		print(args)
		if len(args) <2:
			await event.edit('<b>‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Å IP! \n–ü—Ä–∏–º–µ—Ä:</b>\n<code>.ip 123.456.789.021</code>', parse_mode='html')
			return
		else:
			ip = args[-1]

		data = requests.get(f"http://ip-api.com/json/{ip}").json()

		await event.edit(
			f"<b><u>‚ö°Ô∏è –¶–µ–ª—å:</u></b> <code>{ip}</code>"
			f"\n\n<b>üóÑ –ü—Ä–æ–≤–∞–π–¥–µ—Ä (ISP):</b> <code>{data['isp']}</code>"
			f"\n<b>üë• –û—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏—è:</b> <code>{data['org']}</code>"
			f"\n<b>üè¥ –°—Ç—Ä–∞–Ω–∞:</b> <code>{data['country']}</code>"
			f"\n<b>üåá –ì–æ—Ä–æ–¥:</b> <code>{data['city']}</code>"
			f"\n<b>üìå –†–µ–≥–∏–æ–Ω:</b> <code>{data['region']}</code>"
			f"\n<b>üìç –®–∏—Ä–æ—Ç–∞:</b> <code>{data['lat']}</code>"
			f"\n<b>üìç –î–æ–ª–≥–æ—Ç–∞:</b> <code>{data['lon']}</code>"
			f'''\n\n<b>üó∫ –ö–∞—Ä—Ç—ã:</b> <a href="https://www.google.com/maps/place/{data['lat']}+{data['lon']}">—Å—Å—ã–ª–∫–∞</a>''',
			parse_mode='html')




		


if __name__ == '__main__':
	try:
		a(client)
	except Exception as e:
		print(e)
		pass
